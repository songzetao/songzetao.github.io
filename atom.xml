<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>songzetao&#39;s blog</title>
  
  
  <link href="https://songzetao.github.io/atom.xml" rel="self"/>
  
  <link href="https://songzetao.github.io/"/>
  <updated>2022-11-08T14:22:14.759Z</updated>
  <id>https://songzetao.github.io/</id>
  
  <author>
    <name>Song Zetao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于我觉得现有的异地恋共同看电影软件不好用想自己写一个却将其写成病毒软件这件事</title>
    <link href="https://songzetao.github.io/2022/11/08/%E5%85%B3%E4%BA%8E%E6%88%91%E8%A7%89%E5%BE%97%E7%8E%B0%E6%9C%89%E7%9A%84%E5%BC%82%E5%9C%B0%E6%81%8B%E5%85%B1%E5%90%8C%E7%9C%8B%E7%94%B5%E5%BD%B1%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%A5%BD%E7%94%A8%E6%83%B3%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E5%8D%B4%E5%B0%86%E5%85%B6%E5%86%99%E6%88%90%E7%97%85%E6%AF%92%E8%BD%AF%E4%BB%B6%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <id>https://songzetao.github.io/2022/11/08/%E5%85%B3%E4%BA%8E%E6%88%91%E8%A7%89%E5%BE%97%E7%8E%B0%E6%9C%89%E7%9A%84%E5%BC%82%E5%9C%B0%E6%81%8B%E5%85%B1%E5%90%8C%E7%9C%8B%E7%94%B5%E5%BD%B1%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%A5%BD%E7%94%A8%E6%83%B3%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E5%8D%B4%E5%B0%86%E5%85%B6%E5%86%99%E6%88%90%E7%97%85%E6%AF%92%E8%BD%AF%E4%BB%B6%E8%BF%99%E4%BB%B6%E4%BA%8B/</id>
    <published>2022-11-08T14:22:14.000Z</published>
    <updated>2022-11-08T14:22:14.759Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="https://songzetao.github.io/2022/11/04/%E6%A0%87%E9%A2%98/"/>
    <id>https://songzetao.github.io/2022/11/04/%E6%A0%87%E9%A2%98/</id>
    <published>2022-11-04T13:58:12.000Z</published>
    <updated>2022-11-04T13:58:44.111Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>GRU原理及手写复现</title>
    <link href="https://songzetao.github.io/2022/11/04/GRU%E5%8E%9F%E7%90%86%E5%8F%8A%E6%89%8B%E5%86%99%E5%A4%8D%E7%8E%B0/"/>
    <id>https://songzetao.github.io/2022/11/04/GRU%E5%8E%9F%E7%90%86%E5%8F%8A%E6%89%8B%E5%86%99%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-11-04T13:32:49.000Z</published>
    <updated>2022-11-08T14:27:18.039Z</updated>
    
    <content type="html"><![CDATA[<p>看了b站大神<a href="https://space.bilibili.com/373596439?spm_id_from=333.337.0.0">deep_thoughts</a>的Pytorch教程，学习了RNN和LSTM的教程，在学习GRU时，想着能不能自己复现一下，尝试后将代码放出来。</p><span id="more"></span><p>首先看看GRU的公式。</p><p>$r_{t}&#x3D;\sigma\left(W_{i r} x_{t}+b_{i r}+W_{h r} h_{(t-1)}+b_{h r}\right)$ </p><p>$z_{t}&#x3D;\sigma\left(W_{i z} x_{t}+b_{i z}+W_{h z} h_{(t-1)}+b_{h z}\right) $</p><p>$n_{t}&#x3D;\tanh \left(W_{i n} x_{t}+b_{i n}+r_{t} *\left(W_{h n} h_{(t-1)}+b_{h n}\right)\right) $</p><p>$h_{t}&#x3D;\left(1-z_{t}\right) * n_{t}+z_{t} * h_{(t-1)}$$</p><p>在公式的实现过程中，需要注意的为：</p><ol><li>PyTorch已经将RNN、LSTM、GRU相关的代码写到了C语言中，为了计算更加快速。</li><li>公式中，$W_{i r}, W_{i z}, W_{i n}$合并为一个$W$，为了计算方便，相应的，后面的三个W和bias也是如此处理。</li><li>仅仅使用Python模拟一次前向计算，并不会进行后向传播。</li></ol><p>接下来为代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现GRU网络</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">batch_size, T, input_size, hidden_size = <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">gru = nn.GRU(input_size, hidden_size, batch_first=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># for name, parameter in gru.named_parameters():</span></span><br><span class="line"><span class="comment">#     print(name, parameter.shape) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_gru</span>(<span class="params"><span class="built_in">input</span>, weight_ih, weight_hh, bias_ih, bias_hh, prev_h</span>):</span><br><span class="line">    input_size = weight_ih.shape[<span class="number">1</span>]</span><br><span class="line">    hidden_size = weight_ih.shape[<span class="number">0</span>] // <span class="number">3</span></span><br><span class="line">    <span class="comment"># prev_h [bs, hidden_size]</span></span><br><span class="line">    batched_weight_ih = torch.tile(weight_ih.unsqueeze(<span class="number">0</span>), (<span class="built_in">input</span>.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">1</span>)) <span class="comment"># batch_size, 3*hidden_size, input_size</span></span><br><span class="line">    batched_weight_hh = torch.tile(weight_hh.unsqueeze(<span class="number">0</span>), (<span class="built_in">input</span>.shape[<span class="number">0</span>], <span class="number">1</span>, <span class="number">1</span>)) <span class="comment"># batch_size, 3*hidden_size, hidden_size</span></span><br><span class="line">    output = torch.zeros(batch_size, T, hidden_size)</span><br><span class="line">    <span class="comment"># print(batched_weight_ih.shape)</span></span><br><span class="line">    <span class="comment"># input [batch_size, input_size]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">        weight_ih_times_xt = torch.bmm(batched_weight_ih, <span class="built_in">input</span>[:, i, :].unsqueeze(<span class="number">2</span>)).squeeze(-<span class="number">1</span>) + bias_ih</span><br><span class="line">        weight_hr_times_ht = torch.bmm(batched_weight_hh, prev_h.unsqueeze(<span class="number">2</span>)).squeeze(-<span class="number">1</span>) + bias_hh</span><br><span class="line">        rt = torch.sigmoid(weight_ih_times_xt[:, :hidden_size] + weight_hr_times_ht[:, :hidden_size])</span><br><span class="line">        zt = torch.sigmoid(weight_ih_times_xt[:, hidden_size: <span class="number">2</span>*hidden_size] + weight_hr_times_ht[:, hidden_size: <span class="number">2</span>*hidden_size])</span><br><span class="line">        nt = torch.tanh(weight_ih_times_xt[:, <span class="number">2</span>*hidden_size: ] + rt* weight_hr_times_ht[:, <span class="number">2</span>*hidden_size:])</span><br><span class="line">        prev_h = (<span class="number">1</span> - zt) * nt + zt * prev_h</span><br><span class="line">        output[:, i, :] = prev_h</span><br><span class="line">    <span class="keyword">return</span> output, prev_h</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.randn(batch_size, T, input_size)</span><br><span class="line">prev_h = torch.randn(batch_size, hidden_size)</span><br><span class="line"><span class="comment"># custom_gru(input, gru.weight_ih_l0, gru.weight_hh_l0, gru.bias_ih_l0, gru.bias_hh_l0, prev_h)</span></span><br><span class="line">prev_h.unsqueeze(<span class="number">0</span>).shape</span><br><span class="line">gru_output, gru_h0 = gru(<span class="built_in">input</span>, prev_h.unsqueeze(<span class="number">0</span>))</span><br><span class="line">custom_gru_output, custom_gru_h0 = custom_gru(<span class="built_in">input</span>, gru.weight_ih_l0, gru.weight_hh_l0, gru.bias_ih_l0, gru.bias_hh_l0, prev_h)</span><br><span class="line"><span class="built_in">print</span>(gru_output, gru_h0)</span><br><span class="line"><span class="built_in">print</span>(custom_gru_output, custom_gru_h0)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了b站大神&lt;a href=&quot;https://space.bilibili.com/373596439?spm_id_from=333.337.0.0&quot;&gt;deep_thoughts&lt;/a&gt;的Pytorch教程，学习了RNN和LSTM的教程，在学习GRU时，想着能不能自己复现一下，尝试后将代码放出来。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>图床工具</title>
    <link href="https://songzetao.github.io/2022/10/05/%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7/"/>
    <id>https://songzetao.github.io/2022/10/05/%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7/</id>
    <published>2022-10-05T13:29:59.000Z</published>
    <updated>2022-10-05T14:14:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 markdown 中引入本地图片后，把文章传到互联网上后图片会失效。使用图床工具是非常好的一个解决方案，可以做到将文章中的图片放到图床平台进行统一管理。</p><span id="more"></span><p>在部署图床的过程中出现了一些困难，有了一些取舍。</p><p>一般来说，使用图床需要一个前端软件，负责将图片进行上传，一个后端软件，负责将图片进行托管。</p><p>通过一阵摸索，主要选择了picgo + <a href="https://sm.ms/">sm.ms</a> 方式进行图床的搭建。</p><p>通过这套方案，可以非常优雅的实现图床管理。使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctrl + q # 截图 </span><br><span class="line">ctrl + w # 上传图床</span><br><span class="line">ctrl + v # 粘贴链接</span><br></pre></td></tr></table></figure><p>一气呵成文档图片的管理。<br><img src="https://s2.loli.net/2022/10/05/7VKplowmRB3QcyL.png"></p><p>缺点是 sm.ms 有容量的限制，需要开会员，等 gitee 或者 github 好用了争取换回他们做存储。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 markdown 中引入本地图片后，把文章传到互联网上后图片会失效。使用图床工具是非常好的一个解决方案，可以做到将文章中的图片放到图床平台进行统一管理。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://songzetao.github.io/categories/tools/"/>
    
    <category term="随笔" scheme="https://songzetao.github.io/categories/tools/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>整理一些命令行</title>
    <link href="https://songzetao.github.io/2022/08/16/%E6%95%B4%E7%90%86%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>https://songzetao.github.io/2022/08/16/%E6%95%B4%E7%90%86%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E8%A1%8C/</id>
    <published>2022-08-16T13:08:11.000Z</published>
    <updated>2022-10-05T14:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在写代码过程中，总会用到一些指令，用的少了就容易遗忘，所以就简单记录一下。</p><span id="more"></span><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>git clone -b <code>branchname</code> url</td><td>克隆特定分支</td></tr><tr><td>git add .</td><td>添加所有文件</td></tr><tr><td>wget url</td><td>下载</td></tr><tr><td>git status</td><td>查看 git 状态</td></tr><tr><td>git commit -m ‘commit message’</td><td>提交commit</td></tr><tr><td>git push -u <code>仓库名</code> <code>分支名</code></td><td>push代码</td></tr><tr><td>git remote get-url –all origin</td><td>查看remote的url</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;在写代码过程中，总会用到一些指令，用的少了就容易遗忘，所以就简单记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="command line" scheme="https://songzetao.github.io/categories/command-line/"/>
    
    
  </entry>
  
</feed>
